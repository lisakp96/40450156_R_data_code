install.packages(car)
install.packages("car")
library(car)
install.packages("carData")
install.packages("carData")
setwd("~/")
install.packages("mosaic")
install.packages("Rcmdr")
install.packages("readxl")
x <- c(1.6, 0.6, 0.4, 0.4, 1.4) sum_x <- sum(x)
mean_x <- mean(x)
absolut_delta_x <- abs(x - mean_x) maa <- mean(absolut_delta_x)
x <- c(1.6, 0.6, 0.4, 0.4, 1.4)
sum_x <- sum(x)
mean_x <- mean(x)
absolut_delta_x <- abs(x - mean_x)
maa <- mean(absolut_delta_x)
detach("package:utils", unload=TRUE)
rm(list=ls())
setwd("~/Desktop/Ananylsis-R")
log <-read.csv(file = "10Sec_500_file_logs.csv", header = FALSE)
log <-read.csv(file = "10Sec_500_file_logs.csv", header = FALSE)
log <-read.csv(file = "10Sec_500_file_logs.csv", header = FALSE)
rm(list=ls())
log1 <-read.csv(file = "log-events-viewer-result-2.csv", header = FALSE)
log2 <-read.csv(file = "log-events-viewer-result-3.csv", header = FALSE)
log3 <-read.csv(file = "log-events-viewer-result-4.csv", header = FALSE)
log4 <-read.csv(file = "log-events-viewer-result-5.csv", header = FALSE)
log5 <-read.csv(file = "log-events-viewer-result-6.csv", header = FALSE)
log6 <-read.csv(file = "log-events-viewer-result-7.csv", header = FALSE)
log7 <-read.csv(file = "log-events-viewer-result-8.csv", header = FALSE)
data <- rbind(log1,log2,log3,log4,log5,log6,log7)
rm(log1,log2,log3,log4,log5,log6,log7)
ips <- data[grep('^[0-9]', data$V2),]
colnames(ips) <- c("timestamp","ip")
plot(ips$ip, width=1000, xaxt="n", xlab="Public IP Distribution of Public IPs at 12h, 30Sec Intervall Invocations")
log <-read.csv(file = "10Sec_500_file_logs.csv", header = TRUE)
ips <- log[grep('^b', log$message),]
lang <-read.csv(file = "perf_python.csv", header = FALSE, sep="#")
rm(list=ls())
setwd("~/Desktop/analysis_R")
library(dplyr)
require(tidyverse)
library(ggplot2)
library(Hmisc)
library(iptools)
library(xtable)
interval_2 <-read.csv(file = "1Sec_Run.csv", header = TRUE)
rm(interval_2)
OneSecRun <-read.csv(file = "1Sec_Run.csv", header = TRUE)
colnames(OneSecRun) <- c("timestamp","message")
View(OneSecRun)
# delete "start"START" to have clean sections starting with "END" of the previous one
OneSecRun <-OneSecRun[!grepl('START ', OneSecRun$message),]
# all private IP adresses
ips <- OneSecRun[grep('169', OneSecRun$message),]
# delete wrong entries
ips <- ips[grepl('^169', ips$message), ]
# exclude 169.254.76.1 = instance private IP to extract VM private IP
# same for all
private_ips_OneSecRun <- ips[!grepl('169.254.76.1', ips$message),]
rm(ips)
# all public ip addresses
public_ips_OneSecRun <- OneSecRun[grepl("b'", OneSecRun$message),]
# formatting
public_ips_OneSecRun$message <- sub("'", '', public_ips_OneSecRun$message)
public_ips_OneSecRun$message <- sub("'", '', public_ips_OneSecRun$message)
public_ips_OneSecRun$message <- sub("b", '', public_ips_OneSecRun$message)
public_ips_OneSecRun$timestamp <- as.POSIXct(public_ips_OneSecRun$timestamp)
ggplot(public_ips_OneSecRun, aes(timestamp, message, group = 1)) +
geom_point(size=0.5) +
scale_x_datetime() +
labs(title="Public IP Time Series OneSecRun Run", x= "1 Sec Request Rate", y="")
TwO5_Concurrent <-read.csv(file = "205_concurrent.csv", header = TRUE)
Two5_Concurrent <-read.csv(file = "205_concurrent.csv", header = TRUE)
colnames(Two5_Concurrent) <- c("timestamp","message")
# all private IP adresses
ips <- Two5_Concurrent[grep('169', Two5_Concurrent$message),]
# delete wrong entries
ips <- ips[grepl('^169', ips$message), ]
# exclude 169.254.76.1 = instance private IP to extract VM private IP
# same for all
private_ips_Two5_Concurrent <- ips[!grepl('169.254.76.1', ips$message),]
rm(ips)
public_ips_Two5_Concurrent <- Two5_Concurrent[grepl("b'", Two5_Concurrent$message),]
# formatting
public_ips_Two5_Concurrent$message <- sub("'", '', public_ips_Two5_Concurrent$message)
public_ips_Two5_Concurrent$message <- sub("'", '', public_ips_Two5_Concurrent$message)
public_ips_Two5_Concurrent$message <- sub("b", '', public_ips_Two5_Concurrent$message)
private_ips_Two5_Concurrent$timestamp <- as.POSIXct(private_ips_Two5_Concurrent$timestamp)
ggplot(private_ips_Two5_Concurrent, aes(timestamp, message, group = 1)) +
geom_point(size=0.5) +
scale_x_datetime() +
labs(title="Public IP Time Series OneSecRun Run", x= "1 Sec Request Rate", y="")
View(Two5_Concurrent)
requs <- Two5_Concurrent[grepl("END'", Two5_Concurrent$message),]
requs <- Two5_Concurrent[grepl("END ", Two5_Concurrent$message),]
View(requs)
Two5_Concurrent <-read.csv(file = "205_concurrent.csv", header = TRUE)
colnames(Two5_Concurrent) <- c("timestamp","message")
# delete "start"START" to have clean sections starting with "END" of the previous one
Two5_Concurrent <-Two5_Concurrent[!grepl('START ', OneSecRun$message),]
# all private IP adresses
ips <- Two5_Concurrent[grep('169', Two5_Concurrent$message),]
# delete wrong entries
ips <- ips[grepl('^169', ips$message), ]
# exclude 169.254.76.1 = instance private IP to extract VM private IP
# same for all
private_ips_Two5_Concurrent <- ips[!grepl('169.254.76.1', ips$message),]
rm(ips)
private_ips_Two5_Concurrent$timestamp <- as.POSIXct(private_ips_Two5_Concurrent$timestamp)
ggplot(private_ips_Two5_Concurrent, aes(timestamp, message, group = 1)) +
geom_point(size=0.5) +
scale_x_datetime() +
labs(title="Public IP Time Series OneSecRun Run", x= "1 Sec Request Rate", y="")
private_ips_Two5_Concurrent$timestamp <- as.POSIXct(private_ips_Two5_Concurrent$timestamp)
ggplot(private_ips_Two5_Concurrent, aes(timestamp, message, group = 1)) +
geom_line(size=0.5) +
scale_x_datetime() +
labs(title="Public IP Time Series OneSecRun Run", x= "1 Sec Request Rate", y="")
View(private_ips_Two5_Concurrent)
View(private_ips_Two5_Concurrent)
unique(private_ips_Two5_Concurrent$message)
test <- unique(private_ips_Two5_Concurrent$message)
test <- data.frame(unique(private_ips_Two5_Concurrent$message))
View(test)
rm(list=ls())
setwd("~/Desktop/analysis_R")
library(dplyr)
require(tidyverse)
library(ggplot2)
library(Hmisc)
library(iptools)
rm(list=ls())
setwd("~/Desktop/analysis_R")
library(dplyr)
require(tidyverse)
library(ggplot2)
library(Hmisc)
library(iptools)
library(xtable)
# https://www.rdocumentation.org
# https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf
# https://statistics.berkeley.edu/computing/r-t-tests
# https://rstudio-pubs-static.s3.amazonaws.com/240657_5157ff98e8204c358b2118fa69162e18.html
# https://www.pluralsight.com/guides/finding-relationships-data-with-r
# MEAN VS MEDIAN ???
# Coefficient of Variation (CV) = sd/mean -> higher CV = performance of instances differ more  -> calculate
# CORRELTAION TEST = LINIAR
# null hypothesis. This is simply the hypothesis that nothing has happened.
# high p-value then you can say that it is reasonable that this result happened under the null hypothesis,
# so the null hypothesis may well be true.
# convention you normally declare that whenever the p-value is less than 0.05 then that is a low enough
# probability to reject the null hypothesis
# Chi Quadrat: Kategorical https://www.beratung-statistik.de/statistik-beratung-infos/r-tutorial/statistik-r-chiquadrat/
chisq.test(coldstart_pythonversions$runtime, coldstart_pythonversions$response_processing_time)
chisq.test(coldstart_pythonversions$requestid, coldstart_pythonversions$response_processing_time)
chisq.test(coldstart_pythonversions$response_processing_time, coldstart_pythonversions$request_rrt)
#p-value > 0.05 -> kein Zusammenhang
cordata = coldstart_pythonversions[,c(18,20)]
corr <- round(cor(cordata), 1)
corr
########################################################################################################
# original run (without fileupload stream)
coldstart_pythonversions  <-read.csv(file = "coldstart_pythonversions.csv", header = FALSE, sep="#")
coldstart_pythonversions = subset(coldstart_pythonversions, select = -c(V18,V19,V20,V21,V22) )
colnames(coldstart_pythonversions) <- c("round_id", "sub-round_id", "worker_no", "worker_id", "region",
"runtime", "memory", "function_name", "instance_ID_generated_by_function",
"requestid", "VM_id", "instance_id", "instanceVM_ip", "public_VM_IP",
"private_instance_ip","VM_uptime", "vCPU_No_and_model",
"request_received_time_from function_", "response_sent_time_from_function",
"response_processing_time", "request_sent_time_vintage",
"response_received_time_vintage", "request_rrt")
pythonversion_coldstart <- as.vector(coldstart_pythonversions$response_processing_time)
summary(pythonversion_coldstart)
# Calculation (Without Fileupload Stream)
#Min.   :22103
#1st Qu.:22797
#Median :23302
#Mean   :23320
#median and mean similar
#3rd Qu.:23922
#Max.   :24645
# Standard Derivation
sd(pythonversion_coldstart) #695.2818
# Coefficient of Variation (CV) -> high = more difference
sd(pythonversion_coldstart) / mean(pythonversion_coldstart) #0.02981433
# ROUND TRIP TIME = request rtt (response received time - request sent time, ms)
pythonversion_roundtrips <- as.vector(coldstart_pythonversions$request_rrt)
summary(pythonversion_roundtrips)
# Standard Derivation
sd(pythonversion_roundtrips)
# Coefficient of Variation (CV) -> high = more difference
sd(pythonversion_roundtrips) / mean(pythonversion_roundtrips)
#Boxplot Coldstart
ggplot(coldstart_pythonversions, aes(x=runtime, y=response_processing_time, fill=runtime)) +
geom_boxplot()+
labs(title="Coldstart Measures of Python Versions", x= "Python Version", y= "Coldstart (m/s)")+
scale_y_continuous(breaks = seq(0, 25000, 250)) +
scale_fill_brewer(type = "seq",
palette = 1)
#Boxplot Request RTT
ggplot(coldstart_pythonversions) +
geom_boxplot(aes(x=coldstart_pythonversions$runtime, y=coldstart_pythonversions$request_rrt, fill=runtime))+
labs(title="Round-Trip Time Measures of Python Versions", x= "Python Version", y= "Round-Trip-Time (m/s)") +
scale_y_continuous(breaks = seq(0, 150000, 100))+
scale_fill_brewer(type = "seq",
palette = 1)
python2.7 <-coldstart_pythonversions[grepl('python2.7', coldstart_pythonversions$runtime),]
coldstart2.7 <- as.vector(python2.7$response_processing_time)
mean(coldstart2.7) #23436.02 (Old) #34732.35 (New)
python3.6 <-coldstart_pythonversions[grepl('python3.6', coldstart_pythonversions$runtime),]
coldstart3.6 <- as.vector(python3.6$response_processing_time)
mean(coldstart3.6) #23309.23 (Old) #35090.86 (New)
python3.7 <-coldstart_pythonversions[grepl('python3.7', coldstart_pythonversions$runtime),]
coldstart3.7 <- as.vector(python3.7$response_processing_time)
mean(coldstart3.7) #23215.92 (Old) #34500.35 (New)
roundtriptime2.7 <- as.vector(python2.7$request_rrt)
mean(roundtriptime2.7) #146330.1 (Old) #221323.4 (New)
roundtriptime3.6 <- as.vector(python3.6$request_rrt)
mean(roundtriptime3.6) #146280.3 (Old) #220738.7 (New)
roundtriptime3.7 <- as.vector(python3.7$request_rrt)
mean(roundtriptime3.7) #146314.1 (Old) # 220681.5 (New)
#Boxplot Coldstart Version and Memory
ggplot(data=python2.7)+
geom_boxplot(aes(x=python2.7$memory, y=python2.7$response_processing_time, group = python2.7$memory))+
labs(title="Memory Cold Start 2.7", x= "Python Version 2.7", y= "Coldstart (m/s)")+
scale_x_continuous(breaks = seq(0, 3010, 1500))
ggplot(data=python3.6)+
geom_boxplot(aes(x=python3.6$memory, y=python3.6$response_processing_time, group = python3.6$memory))+
labs(title="Memory Cold Start 3.6", x= "Python Version 3.6", y= "Coldstart (m/s)")+
scale_x_continuous(breaks = seq(0, 3010, 1500))
ggplot(data=python3.7)+
geom_boxplot(aes(x=python3.7$memory, y=python3.7$response_processing_time, group = python3.7$memory))+
labs(title="Memory Cold Start 3.7", x= "Python Version 3.7", y= "Coldstart (m/s)")+
scale_x_continuous(breaks = seq(0, 3010, 1500))
#Boxplot Request RTT Version and Memory
ggplot(data=python2.7)+
geom_boxplot(aes(x=python2.7$memory, y=python2.7$request_rrt, group = python2.7$memory))+
labs(title="Memory Round-Trip-Time 2.7", x= "Python Version 2.7", y= "Coldstart (m/s)")+
scale_x_continuous(breaks = seq(0, 3010, 1500))
ggplot(data=python3.6)+
geom_boxplot(aes(x=python3.6$memory, y=python3.6$request_rrt, group = python3.6$memory))+
labs(title="Memory Round-Trip-Time 3.6", x= "Python Version 3.6", y= "Coldstart (m/s)")+
scale_x_continuous(breaks = seq(0, 3010, 1500))
ggplot(data=python3.7)+
geom_boxplot(aes(x=python3.7$memory, y=python3.7$request_rrt, group = python3.7$memory))+
labs(title="Memory Round-Trip-Time 3.7", x= "Python Version 3.7", y= "Coldstart (m/s)")+
scale_x_continuous(breaks = seq(0, 3010, 1500))
# check for duplicated VMs
# same instance id = same instance ip = same VM public ip (!)
test <- data.frame(!coldstart_pythonversions$public_VM_IP %in% coldstart_pythonversions$public_VM_IP[duplicated(coldstart_pythonversions$public_VM_IP)])
coldstart_pythonversions <- cbind(coldstart_pythonversions, test)
rm(test)
duplicated <- subset(coldstart_pythonversions, coldstart_pythonversions$X.coldstart_pythonversions.public_VM_IP..in..coldstart_pythonversions.public_VM_IP.duplicated.coldstart_pythonversions.public_VM_IP.. == "TRUE")
rm(duplicated)
specificIp1<- coldstart_pythonversions[ which(coldstart_pythonversions$public_VM_IP=='3.236.218.254'),]
specificIp2<- coldstart_pythonversions[ which(coldstart_pythonversions$public_VM_IP=="b'100.24.27.41'"),]
specificIp3<- coldstart_pythonversions[ which(coldstart_pythonversions$public_VM_IP=="b'54.159.6.73'"),]
specificIp4<- coldstart_pythonversions[ which(coldstart_pythonversions$public_VM_IP=='54.80.192.16'),]
specificIp5<- coldstart_pythonversions[ which(coldstart_pythonversions$public_VM_IP=="b'3.237.48.93'"),]
specificIp6<- coldstart_pythonversions[ which(coldstart_pythonversions$public_VM_IP=='100.27.13.170'),]
specificIp7<- coldstart_pythonversions[ which(coldstart_pythonversions$public_VM_IP=="b'3.234.210.198'"),]
specificIp8<- coldstart_pythonversions[ which(coldstart_pythonversions$public_VM_IP=="b'54.211.235.86'"),]
specificIp9<- coldstart_pythonversions[ which(coldstart_pythonversions$public_VM_IP=="b'54.221.41.240'"),]
specificIp<- rbind(specificIp1,specificIp2,specificIp3,specificIp4,specificIp5,specificIp6,specificIp7,specificIp8,specificIp9)
rm(specificIp1,specificIp2,specificIp3,specificIp4,specificIp5,specificIp6,specificIp7,specificIp8,specificIp9)
specificIp = subset(specificIp, select = -c(X.coldstart_pythonversions.public_VM_IP..in..coldstart_pythonversions.public_VM_IP.duplicated.coldstart_pythonversions.public_VM_IP..))
specificIp = subset(specificIp, select = -c(round_id,worker_no, worker_id,region,vCPU_No_and_model,VM_uptime,response_sent_time_from_function,request_sent_time_vintage,response_received_time_vintage))
specificIp = subset(specificIp, select = -c(`request_received_time_from function_`))
options("scipen"=100, "digits"=4)
first_round <- specificIp[1:6,,drop=F]
xtable(first_round)
